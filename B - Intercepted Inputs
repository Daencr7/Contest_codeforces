#include <bits/stdc++.h>
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#define for0(i, n) for (int i = 0; i < n; ++i)
#define for1(i, n) for (int i = 1; i <= n; ++i)
#define el cout<<"\n"

using namespace std;

//int pos(int n){
//    if (n%2 == 0) return (n)/2;
//    else return ;
//}
struct Interval
{
    int fi,se;
};
bool comp(Interval it1, Interval it2){
    return(it1.se > it2.se);
}
bool check(int a, int b, string s){
    int x = 0,y=0;
    string s_long = "";
    for (int j = 0; j < 30; j++){
        s_long += s;
    }
    for (char move: s_long){
        if (x == a && y == b) return true;
        if (move == 'N') y++;
        else if (move == 'S') y--;
        else if (move == 'E') x++;
        else if (move == 'W') x--;
    }
    return false;
}
//int solve (){
//    int pt = 0;
//    int n;cin>>n;
//    vector <int> v(n+1);
//    for (int i = 1; i <= n; i++)
//    {
//        cin>>v[i];
//    } 
//    int ptr1 = 1, ptr2 = n;
//    while (ptr1 != n)
//    {
//        if (ptr1 == ptr2) {
//            ptr1++;ptr2 = n;
//        }
//        if (v[ptr1] = v[ptr2]){
//            v.erase(v.begin()+ptr2);
//            --n;
//            v.erase(v.begin()+ptr1);
//            --n;
//            pt++;
//            ptr2 = n;
//        }
//        else{
//            --ptr2;
//        }

//    } 
//    return pt;
//}

int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    int t;cin>>t;
    while (t--){

        int k;cin>>k;
        map <int, int> m;
        vector <int> v(k);
        for (int i = 0; i < k; i++)
        {
            cin >> v[i];
            m[v[i]] = m[v[i]] + 1; 
        }
        for (int x: v){
            if ((k-2)%x==0){
                if (x == (k-2)/x){
                    if (m[(k-2)/x] > 1){
                        cout <<x<<" "<<x;
                        break;
                    }
                }else{
                    if (m[(k-2)/x] != 0){
                        cout <<x<<" "<<(k-2)/x;
                        break;
                    }
                }
            }
        }
        
        el;

    }
    return 0;
}
